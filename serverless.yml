service: myserverlessproject
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  profile: serverlessUser
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: '*'

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: myserverlessprojectuploadbucket-123098
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData



      
functions:
    getPlayerScore:
        handler: lambdas/endpoints/getPlayerScore.handler
        events:
            - http:
                  path: get-player-score/{ID}
                  method: GET
                  cors: true
    createPlayerScore:
        handler: lambdas/endpoints/createPlayerScore.handler
        events:
            - http:
                  path: create-player-score/{ID}
                  method: POST
                  cors: true
    updatePlayerScore:
        handler: lambdas/endpoints/updatePlayerScore.handler
        events:
            - http:
                  path: update-player-score/{ID}
                  method: PUT
                  cors: true
    getGameScores:
        handler: lambdas/endpoints/getGameScores.handler
        events:
            - http:
                  path: get-game-scores/{game}
                  method: GET
                  cors: true

    createFile:
        handler: lambdas/endpoints/createFile.handler
        events:
            - http:
                  path: create-file/{fileName}
                  method: POST
                  cors: true
    getFile:
        handler: lambdas/endpoints/getFile.handler
        events:
            - http:
                  path: get-file/{fileName}
                  method: GET
                  cors: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: ${self:custom.tableName}
          AttributeDefinitions:
            - AttributeName: ID
              AttributeType: S
            - AttributeName: game
              AttributeType: S
          KeySchema:
              - AttributeName: ID
                KeyType: HASH
          BillingMode: PAY_PER_REQUEST

          GlobalSecondaryIndexes:
            - IndexName: game-index
              KeySchema: 
                - AttributeName: game
                  KeyType: HASH
              Projection:
                ProjectionType: ALL






